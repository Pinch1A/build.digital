#from django.shortcuts import render

from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
from rest_framework.renderers import JSONRenderer
from rest_framework.parsers import JSONParser
from digital.models import Field
from rest_framework import serializers
from digital.serializers import FieldSerializer

class JSONResponse(HttpResponse):
    """
    An HttpResponse that renders its content into JSON.
    """
    def __init__(self, data, **kwargs):
        content = JSONRenderer().render(data)
        kwargs['content_type'] = 'application/json'
        super(JSONResponse, self).__init__(content, **kwargs)

# Create your views here.

@csrf_exempt
#def field_list(request):
    """
 #   List all code snippets, or create a new snippet.
    """
  #  if request.method == 'GET':
   #     fields = Fields.objects.all()
    #    serializer = FieldSerializer(fields, many=True)
        return JSONResponse(serializer.data)

@api_view(['GET'])
def field_collection(request):
    if request.method == 'GET':
        fields = Field.objects.all()
        serializer = FieldSerializer(posts, many=True)
        return Response(serializer.data)


@api_view(['GET'])
def field_element(request, pk):
    try:
        field = Field.objects.get(pk=pk)
    except Field.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        serializer = FieldSerializer(post)
        return Response(serializer.data)

@api_view(['GET', 'POST'])

def field_collection(request):
    if request.method == 'GET':
        fields = Field.objects.all()
        serializer = FieldSerializer(fields, many=True)
        return Response(serializer.data)
    elif request.method == 'POST':
        #data = {'text': request.DATA.get('the_post'), 'author': request.user.pk}
        data = {'image_path': request.data.get('image_path'), 'desc_text': request.data.get('desc_text'), 'price': request.data.get('price'), 'stock_number': request.data.get('stock_number'), 'available_text': request.data.get('available_text')}
	serializer = FieldSerializer(data=data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


    #elif request.method == 'POST':
    #    data = JSONParser().parse(request)
    #    serializer = FieldSerializer(data=data)
    #    if serializer.is_valid():
    #        serializer.save()
    #        return JSONResponse(serializer.data, status=201)
    #    return JSONResponse(serializer.errors, status=400)

@api_view(['GET', 'DELETE'])
def field_element(request, pk):
    try:
        field = Field.objects.get(pk=pk)
    except Field.DoesNotExist:
        return HttpResponse(status=404)

    if request.method == 'GET':
        serializer = FieldSerializer(field)
        return Response(serializer.data)

    # elif request.method == 'DELETE':
    #    field.delete()
    #	return Response(status=status.HTTP_204_NO_CONTENT)

def delete_post(request):
    if request.method == 'DELETE':

        post = Field.objects.get(pk=int(QueryDict(request.body).get('id')))

        post.delete()

        response_data = {}
        response_data['msg'] = 'Field was deleted.'

        return HttpResponse(
            json.dumps(response_data),
            content_type="application/json"
        )
    else:
        return HttpResponse(
            json.dumps({"nothing to see": "this isn't happening"}),
            content_type="application/json"
        )

#@csrf_exempt
#def field_detail(request, pk):
    """
#    Retrieve, update or delete a code snippet.
    """
#    try:
#        field = Field.objects.get(pk=pk)
#    except Field.DoesNotExist:
#        return HttpResponse(status=404)

#    if request.method == 'GET':
#        serializer = FieldSerializer(field)
#        return JSONResponse(serializer.data)

#    elif request.method == 'PUT':
#        data = JSONParser().parse(request)
#        serializer = FieldSerializer(field, data=data)
#        if serializer.is_valid():
#            serializer.save()
#            return JSONResponse(serializer.data)
#            return JSONResponse(serializer.errors, status=400)

#    elif request.method == 'DELETE':
#	@csrf_exempt 
#        field.delete()
#        return HttpResponse(status=203)
